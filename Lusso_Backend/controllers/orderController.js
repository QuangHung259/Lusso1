// controllers/orderController.js
const Order = require("../models/Order");

// [1] Th√™m ƒë∆°n h√†ng m·ªõi
// [1] Th√™m ƒë∆°n h√†ng m·ªõi
const createOrder = async (req, res) => {
  try {
    console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ client:", req.body);
    console.log("User t·ª´ authMiddleware:", req.user);
    console.log(
      "üåê K·∫øt n·ªëi MongoDB:",
      Order.db?.databaseName,
      " - URI:",
      process.env.MONGO_URI
    );

    const { customerInfo, products, totalAmount, paymentMethod, cardInfo } =
      req.body;

    // Validate customer info
    if (
      !customerInfo ||
      !customerInfo.name ||
      !customerInfo.phone ||
      !customerInfo.email ||
      !customerInfo.city ||
      !customerInfo.district ||
      !customerInfo.address
    ) {
      console.warn("‚ö†Ô∏è Thi·∫øu th√¥ng tin kh√°ch h√†ng:", customerInfo);
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin kh√°ch h√†ng" });
    }

    // Validate products
    if (
      !Array.isArray(products) ||
      products.length === 0 ||
      products.some(
        (p) => !p.product || !p.name || p.quantity <= 0 || p.price < 0
      )
    ) {
      console.warn("‚ö†Ô∏è D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", products);
      return res.status(400).json({ message: "D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
    }

    // Validate totalAmount
    if (typeof totalAmount !== "number" || totalAmount < 0) {
      console.warn("‚ö†Ô∏è T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá:", totalAmount);
      return res.status(400).json({ message: "T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }

    const user = req.user; // l·∫•y t·ª´ authMiddleware

    const newOrder = new Order({
      user: user._id,
      customerInfo,
      products,
      totalAmount,
      paymentMethod: paymentMethod || "cod",
      cardInfo: paymentMethod === "card" ? cardInfo : {},
      status: "pending",
    });

    const savedOrder = await newOrder.save();
    console.log("Order ƒë√£ l∆∞u:", savedOrder);

    res.status(201).json({
      message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o!",
      order: savedOrder,
    });
  } catch (error) {
    console.error("L·ªñI KHI T·∫†O ƒê∆†N H√ÄNG:", error);
    res.status(500).json({ message: "L·ªói khi t·∫°o ƒë∆°n h√†ng", error });
  }
};

// [2] L·∫•y danh s√°ch ƒë∆°n h√†ng
const getOrders = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate("user", "fullName email")
      .populate("products.product", "name price image");

    if (!orders.length) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o" });
    }

    res.status(200).json(orders);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// [3] L·∫•y ƒë∆°n h√†ng theo ID
const getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate("user", "fullName email")
      .populate("products.product", "name price image");

    if (!order)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res.status(200).json(order);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y ƒë∆°n h√†ng", error });
  }
};

// [4] C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
const updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const updatedOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { status },
      { new: true }
    );

    if (!updatedOrder)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res
      .status(200)
      .json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", order: updatedOrder });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng", error });
  }
};

// [5] X√≥a ƒë∆°n h√†ng
const deleteOrder = async (req, res) => {
  try {
    const deletedOrder = await Order.findByIdAndDelete(req.params.id);
    if (!deletedOrder)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    res.status(200).json({ message: "X√≥a ƒë∆°n h√†ng th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a ƒë∆°n h√†ng", error });
  }
};

// [6] L·∫•y ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
const getUserOrders = async (req, res) => {
  try {
    const orders = await Order.find({ user: req.user._id })
      .sort({ createdAt: -1 })
      .populate("products.product", "name price image");

    res.status(200).json(orders);
  } catch (error) {
    console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

module.exports = {
  createOrder,
  getOrders,
  getOrderById,
  updateOrderStatus,
  deleteOrder,
  getUserOrders,
};
